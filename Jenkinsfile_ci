@Library('jenkins-library')_
pipeline{
agent any
environment{
name = "Yusha Iqbal"
project_description = "This is Jenkins Project I am creating to understand and master Jenkinsd pipeline build with maven"
}
parameters{
choice(name:'Branch_Name',choices:['main','feature-yusha'],description:'giving the branch choice')
}
stages{
stage('Introducing my self'){
steps{
sh 'echo "Hello my name is $name" '
}
}
stage('description of the project'){
steps{
echo "${env.project_description}"
}
}
stage('adding git checkout'){
when{
expression{
env.BRANCH_NAME == 'feature-yusha'
}
}
steps{
git branch: '$Branch_Name', credentialsId: 'ibt_yusha_github', url: 'https://github.com/IBT-learning/DevOps-Git.git'
}
}
stage('validate'){
steps{
withMaven(maven: 'maven_3.8') {
    sh 'mvn validate'
}
}
}
stage('compile'){
steps{
withMaven(maven: 'maven_3.8') {
    sh 'mvn compile'
}
}
}
stage('test'){
steps{
withMaven(maven: 'maven_3.8') {
    sh 'mvn test'
}
}
}
stage('Sonar Qube analysis'){
steps{
sonarScan()
}
}
stage('package'){
steps{
withMaven(maven: 'maven_3.8') {
    sh 'mvn package'
}
}
}
stage('Dependecy Check'){
steps{
dependencyCheck additionalArguments:'''
-o "./"
-s "./"
-f "ALL"
--prettyPrint''', odcInstallation: 'dependency-check'
dependencyCheckPublisher pattern: 'dependency-check-report.xml'
}
}
stage('configure dev server'){
when{
expression{
env.BRANCH_NAME == 'feature-yusha'
}
}
steps{
ansiblePlaybook{
become: true,
colorized: true,
credentialsId: 'yusha-ssh',
disableHostKeyChecking: true,
inventory: 'hosts',
playbook: 'tomcat.yaml'
}
}
}
stage('deploy to dev'){
steps{
withMaven(maven: 'maven_3.8'){
withCredentials([file(credentialsId: 'mvn_settings_yusha', variable: 'yusha_settings')]){
sh 'mvn deploy -s $yusha_settings'
}
}
}
}
 stage('Deploy to Dev server')
       {
        steps{
            script{
                def remote = [name: 'yusha-dev', host: '68.183.108.4', allowAnyHosts: true]
                withCredentials([usernamePassword(credentialsId: ''yusha_tomcat'', passwordVariable: 'password', usernameVariable: 'username')]){
                    remote.password = password
                    remote.user = username
                    sshPut remote: remote, from: 'target/yush-app-1.0-SNAPSHOT.jar' , into: '/opt/tomcat/webapps'
                }

            }
        }
       }
stage('deployment approval'){
steps{
input id: 'Approval', message: 'Do you want to approve the deployment?', ok: 'yes', parameters: [password(defaultValue: 'Yusha@70', name: 'password_to_approve')], submitter: 'yusha70'
}
}
stage('Deploy to prod server')
       {
        steps{
            script{
                def remote = [name: 'yusha-prod', host: '68.183.108.4', allowAnyHosts: true]
                withCredentials([usernamePassword(credentialsId: 'yusha_tomcat', passwordVariable: 'password', usernameVariable: 'username')]){
                    remote.password = password
                    remote.user = username
                    sshPut remote: remote, from: 'target/yush-app-1.0-SNAPSHOT.jar' , into: '/opt/tomcat/webapps'
                }

            }
        }
       }
}
}
